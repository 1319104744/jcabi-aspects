 ------
 Asynchronous Execution of Java Methods
 ------
 Carlos Miranda
 ------
 2014-06-04
 ------

~~
~~ Copyright (c) 2012-2014, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Asynchronous Execution of Methods

  Methods annotated with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Async.html}<<<@Async>>>}}
  will return immediately to its caller, while its operation executes
  asynchronously:

+--
public class AsyncExample {
  @Async
  public void asynchronousMethod() {
    //perform some operation here
  }
}
+--

  The <<<asynchronousMethod()>>> method will immediately return control to its
  caller when invoked, without having to wait for the operation to complete.
  Note that the <<asynchronousMethod()>> operation will execute in a separate
  thread, so you must ensure thread safety for that any shared data being
  manipulated within <<asynchrnousMethod()>>.

  An asynchronous method can also pass a result to its caller, by returning a
  <<Future>>, through the returned value of <<Future.get()>>.

+--
public class AsyncWithResultExample {
  @Async
  public Future<Integer> calculateSomething() {
    //perform some operation here
  }
}
+--

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}how to integrate it into your <<<pom.xml>>>}}.
